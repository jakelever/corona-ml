
from os.path import join

outDir = "data"

rule:
	input: join(outDir,"autoannotations.json"), join(outDir,"terms_complete.txt")

rule:
	input: join(outDir,"terms_drugs.json"), join(outDir,"terms_symptoms.json"), join(outDir,"terms_locations.json"), join(outDir,"terms_medicaldisciplines.json"), join(outDir,"terms_genes_and_proteins.json"), join(outDir,"terms_coronavirus_proteins.json"), join(outDir,"terms_custom.json")
	output: join(outDir,"terms_complete.txt")
	shell: "echo DONE > {output}"

rule:
	input: 
		toexpand=join("predefined","more_custom.tsv"),
		predefined=join("predefined","terms_custom.json")
	output: join(outDir,"terms_custom.json")
	shell: "python getCustomTerms.py --termsToExpand {input.toexpand} --predefined {input.predefined} --outJSON {output}"
	
rule:
	output: join(outDir,"terms_drugs.json")
	shell: "python getDrugsFromWikidata.py --outJSON {output}"
	
rule:
	output: join(outDir,"terms_species.json")
	shell: "python getSpeciesFromWikidata.py --outJSON {output}"
	
rule:
	output: join(outDir,"terms_medicaldisciplines.json")
	shell: "python getMedicalDisciplinesFromWikidata.py --outJSON {output}"
	
rule:
	output: join(outDir,"terms_genes_and_proteins.json")
	shell: "python getGenesFromWikidata.py --outJSON {output}"
	
rule:
	input: join("predefined","terms_viruses.json")
	output: join(outDir,"terms_coronavirus_proteins.json")
	shell: "python getCoronavirusProteins.py --viruses {input} --outJSON {output}"
	
rule:
	output: join(outDir,"terms_symptoms.json")
	shell: "python getSymptomsFromWikidata.py --outJSON {output}"
	
rule:
	output: join(outDir,"terms_locations.json")
	shell: "python getGeonamesFromWikidata.py --outJSON {output}"

rule:
	input: 
		documents=join(outDir,"alldocuments.json"),
		additions="additions.json",
		spotfixes="spotFixes.json",
	output: join(outDir,"alldocuments.spotfixed.json")
	shell: "python applySpotfixesAndAddCustomDocs.py --inJSON {input.documents} --additions {input.additions} --spotfixes {input.spotfixes} --outJSON {output}"

rule:
	input:
		documents=join(outDir,"alldocuments.spotfixed.json"),
		webDir="webdata"
	output: join(outDir,"scraped.flag")
	shell: "python scrapeWebdata.py --documents {input.documents} --webDir {input.webDir} --outFlagFile {output}"
	
rule:
	input:
		webDir="webdata",
		flag=join(outDir,"scraped.flag")
	output: join(outDir,"webmetadata.json")
	shell: "python collectMetadataFromWebData.py --inDir {input.webDir} --prevData {output}.prev --outData {output} && cp {output} {output}.prev"
	
rule:
	input: 
		documents=join(outDir,"alldocuments.spotfixed.json"),
		webmetadata=join(outDir,"webmetadata.json")
	output: join(outDir,"alldocuments.webdata.json")
	shell: "python integrateWebData.py --inJSON {input.documents} --webmetadata {input.webmetadata} --outJSON {output}"
	
rule:
	input: join(outDir,"alldocuments.webdata.json")
	output: join(outDir,"alldocuments.cleaned.json")
	shell: "python cleanupDocs.py --inJSON {input} --outJSON {output}"
	
rule:
	input: join(outDir,"alldocuments.cleaned.json")
	output: join(outDir,"alldocuments.noduplicates.json")
	shell: "python mergeDuplicates.py --inJSON {input} --outJSON {output}"
	
rule:
	input: join(outDir,"alldocuments.noduplicates.json")
	output: 
		documents=join(outDir,"alldocuments.english.json"),
		nonenglish=join(outDir,"alldocuments.nonenglish.json")
	shell: "python filterOutLanguages.py --inJSON {input} --prevNonEnglishDocs {output.nonenglish}.prev --prevEnglishDocs {output.documents}.prev --outNonEnglishDocs {output.nonenglish} --outEnglishDocs {output.documents} && cp {output.nonenglish} {output.nonenglish}.prev && cp {output.documents} {output.documents}.prev"
	
rule:
	input: 
		json=join(outDir,"alldocuments.english.json"),
		annotations="annotations.json"
	output: join(outDir,"alldocuments.withannotations.json")
	shell: "python integrateAnnotations.py --inJSON {input.json} --annotations {input.annotations} --outJSON {output}"

rule:
	input: join(outDir,"alldocuments.withannotations.json")
	output: join(outDir,"alldocuments.parsed.pickle")
	shell: "python parseDocuments.py --inJSON {input} --prevPickle {output}.prev --outPickle {output} && cp {output} {output}.prev"
	
rule:
	input: 
		json=join(outDir,"alldocuments.withannotations.json"),
		parsed=join(outDir,"alldocuments.parsed.pickle"),
		entities="entities.json",
		entitiesflag=join(outDir,"terms_complete.txt"),
		stopwords=join("predefined","stopwords.txt"),
		removals=join("predefined","removals.tsv")
	output: join(outDir,"alldocuments.ner.json")
	shell: "python doNER.py --inJSON {input.json} --entities {input.entities} --stopwords {input.stopwords} --removals {input.removals} --inParsed {input.parsed} --outJSON {output}"

rule:
	input: join(outDir,"alldocuments.ner.json"),
	output: join(outDir,"alldocuments.categories.json")
	shell: "python ../category_prediction/applyCategoryModel.py --inJSON {input} --modelDir ../category_prediction/optimal_model/ --outJSON {output}"

rule:
	input: join(outDir,"alldocuments.categories.json"),
	output: join(outDir,"alldocuments.extracategories.json")
	shell: "python doExtraCategories.py --inJSON {input} --outJSON {output}"

rule:
	input: join(outDir,"alldocuments.extracategories.json"),
	output: join(outDir,"alldocuments.final.json")
	shell: "python finalFilter.py --inJSON {input} --outJSON {output}"

rule:
	input: join(outDir,"alldocuments.final.json"),
	output: join(outDir,"autoannotations.json")
	shell: "python createAutoAnnotations.py --inJSON {input} --outJSON {output}"
	
rule:
	input: join(outDir,"alldocuments.final.json")
	output: join(outDir,"altmetric.json")
	shell: "python ../altmetric/getAltmetricData.py --apiKeyFile ../altmetricApiKey.json --documents {input} --outData {output}"
